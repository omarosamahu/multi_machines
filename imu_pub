#!/usr/bin/env python
import rospy 
import cv2 
import sys
import logging
import time
from std_msgs.msg import String
from sensor_msgs.msg import Image,Imu
from cv_bridge import CvBridge,CvBridgeError
from Adafruit_BNO055 import BNO055
import tf

#init new node 
rospy.init_node('imu_publisher')
#create the publisher 
pub = rospy.Publisher('imu',Imu,queue_size=100)
#adjust rate 
rate = rospy.Rate(10)

''''
heeeeeeeeeeeeeeeeeeeere we gooooooo 
'''
imuMsg = Imu()
# bridge = CvBridge()
#initialize the camera module
bno = BNO055.BNO055(serial_port='/dev/ttyUSB0')

if len(sys.argv) == 2 and sys.argv[1].lower() == '-v':
    logging.basicConfig(level=logging.DEBUG)

# Initialize the BNO055 and stop if something went wrong.
if not bno.begin():
    raise RuntimeError('Failed to initialize BNO055! Is the sensor connected?')

if len(sys.argv) == 2 and sys.argv[1].lower() == '-v':
     logging.basicConfig(level=logging.DEBUG)

 # Initialize the BNO055 and stop if something went wrong.
if not bno.begin():
     raise RuntimeError('Failed to initialize BNO055! Is the sensor connected?')


while not rospy.is_shutdown():
	    while True:
	    	
		
			yaw, roll, pitch = bno.read_euler()
			imuMsg.linear_acceleration.x = yaw
			imuMsg.linear_acceleration.y = roll
			imuMsg.linear_acceleration.z = pitch

			q = tf.transformations.quaternion_from_euler(roll,pitch,yaw)
			imuMsg.orientation.x = q[0]
			imuMsg.orientation.y = q[1]
			imuMsg.orientation.z = q[2]
			imuMsg.orientation.w = q[3]
			# q = tf.transformations.quaternion_from_euler(roll,pitch,yaw)

			#data = bridge.cv2_to_imgmsg(frame)
			
			pub.publish(imuMsg)
			# print imuMsg
			rate.sleep()
		
